<ModelBehaviors>

    <Template Name="FBW_ISIS_Knob_Template">
		<DefaultTemplateParameters>
			<ID>1</ID>
			<ANIMREF_ID>-1</ANIMREF_ID>
			<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_BARO_KNOB_INCREASE</ANIMTIP_0>
			<ANIMTIP_0_ON_CURSOR>TurnRight</ANIMTIP_0_ON_CURSOR>
			<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_BARO_KNOB_DECREASE</ANIMTIP_1>
			<ANIMTIP_1_ON_CURSOR>TurnLeft</ANIMTIP_1_ON_CURSOR>
			<ANIMTIP_2>TT:COCKPIT.TOOLTIPS.BARO_REF_SET_STD</ANIMTIP_2>
			<ANIMTIP_2_ON_CURSOR>DownArrow</ANIMTIP_2_ON_CURSOR>
			<ANIMTIP_3>TT:COCKPIT.TOOLTIPS.BARO_ENABLE_SELECTION</ANIMTIP_3>
			<ANIMTIP_3_ON_CURSOR>UpArrow</ANIMTIP_3_ON_CURSOR>
			<ANIMTIP_4>TT:COCKPIT.TOOLTIPS.BARO_REF_SET_STD</ANIMTIP_4>
			<ANIMTIP_4_ON_CURSOR>Hand</ANIMTIP_4_ON_CURSOR>
		</DefaultTemplateParameters>

		<UseTemplate Name="ASOBO_GT_Helper_Suffix_ID_Appender">
			<TEMPLATE_TO_CALL>FBW_ISIS_Knob_SubTemplate1</TEMPLATE_TO_CALL>
		</UseTemplate>
	</Template>

    <Template Name="FBW_ISIS_Knob_SubTemplate1">
	<DefaultTemplateParameters>
		<NODE_ID>AUTOPILOT_Knob_Baro_#ID##SUFFIX_ID#</NODE_ID>
		<ANIM_NAME>AUTOPILOT_Knob_Baro_#ID##SUFFIX_ID#</ANIM_NAME>
		<PART_ID>AUTOPILOT_Knob_Baro</PART_ID>
		<ANIMREF_ID>-1</ANIMREF_ID>
		<ANIMTIP_0>TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_BARO_KNOB_INCREASE</ANIMTIP_0>
		<ANIMTIP_0_ON_CURSOR>TurnRight</ANIMTIP_0_ON_CURSOR>
		<ANIMTIP_1>TT:COCKPIT.TOOLTIPS.AUTOPILOT_PANEL_BARO_KNOB_DECREASE</ANIMTIP_1>
		<ANIMTIP_1_ON_CURSOR>TurnLeft</ANIMTIP_1_ON_CURSOR>
        <BARO_ID>#ID#</BARO_ID>
		<ANIM_NAME_KNOB>#ANIM_NAME#</ANIM_NAME_KNOB>
		<ANIM_NAME_PUSH>AUTOPILOT_Knob_Baro_#ID#_push#SUFFIX_ID#</ANIM_NAME_PUSH>
        <MODE_QNH>0</MODE_QNH>
        <MODE_STD>1</MODE_STD>
        <!--ANIM_NAME_PUSHPULL>AUTOPILOT_Knob_Baro_#ID#_pushpull#SUFFIX_ID#</ANIM_NAME_PUSHPULL-->
	</DefaultTemplateParameters>
	<Component ID="#NODE_ID#" Node="#NODE_ID#">
		<UseTemplate Name="ASOBO_GT_Knob_Infinite_Push">
            <ANTICLOCKWISE_CODE>
            (L:XMLVAR_Baro#BARO_ID#_ForcedToSTD) ! if{
                #BARO_ID# (&gt;K:KOHLSMAN_DEC)
            }
            </ANTICLOCKWISE_CODE>
            <CLOCKWISE_CODE>
            (L:XMLVAR_Baro#BARO_ID#_ForcedToSTD) ! if{
                #BARO_ID# (&gt;K:KOHLSMAN_INC)
            }
            </CLOCKWISE_CODE>
            <LEFT_SINGLE_CODE type="rnp">
                alias bugsActive = (L:A32NX_ISIS_BUGS_ACTIVE, bool);
                alias baroMode = (L:A32NX_ISIS_BARO_MODE, enum);
                alias baroSetting = (A:KOHLSMAN SETTING MB:#BARO_ID#, bars);
                alias baroSaved = (O:A32NX_ISIS_BARO_SAVED, number);
                alias baroSet = (K:#BARO_ID#:KOHLSMAN_SET, number);
                alias baroStd = (K:BAROMETRIC_STD_PRESSURE, number);

                if bugsActive {

                } else if baroMode == #MODE_QNH, number# {
                    baroMode = #MODE_STD, number#;
                    baroSaved = baroSetting * 16000;
                    baroStd = #BARO_ID, number#;
                } else {
                    baroMode = #MODE_QNH, number#;
                    baroSet = baroSaved;
                }
            </LEFT_SINGLE_CODE>
            <WWISE_EVENT>autopilot_selector_knob</WWISE_EVENT>
            <COUNT>36</COUNT>
            <WWISE_EVENT_1>autopilot_knob_push_button_on</WWISE_EVENT_1>
            <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
            <WWISE_EVENT_2>autopilot_knob_push_button_off</WWISE_EVENT_2>
            <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
        </UseTemplate>
	</Component>
	</Template>

</ModelBehaviors>
