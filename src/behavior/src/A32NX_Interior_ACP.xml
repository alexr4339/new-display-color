<ModelBehaviors>
    <Template Name="FBW_Airbus_AudioSwitching_Knob">
        <Update Once="True">
            1 (&gt;L:A32NX_AUDIOSWITCHING_KNOB)
        </Update>
        <DefaultTemplateParameters>
            <WWISE_EVENT>turnknob</WWISE_EVENT>
            <ANIMTIP_0>TT:COCKPIT.TOOLTIPS.WIPERS_SET_OFF</ANIMTIP_0>
            <ANIMTIP_1>TT:COCKPIT.TOOLTIPS.WIPERS_SET_SLOW</ANIMTIP_1>
            <ANIMTIP_2>TT:COCKPIT.TOOLTIPS.WIPERS_SET_FAST</ANIMTIP_2>
        </DefaultTemplateParameters>
        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <UseTemplate Name="ASOBO_GT_Switch_3States">
                <CODE_POS_0>0 (&gt;L:A32NX_AUDIOSWITCHING_KNOB) #ON_SWITCH#</CODE_POS_0>
                <CODE_POS_1>1 (&gt;L:A32NX_AUDIOSWITCHING_KNOB) #ON_SWITCH#</CODE_POS_1>
                <CODE_POS_2>2 (&gt;L:A32NX_AUDIOSWITCHING_KNOB) #ON_SWITCH#</CODE_POS_2>
                <STATE0_TEST>(L:A32NX_AUDIOSWITCHING_KNOB) 0 ==</STATE0_TEST>
                <STATE1_TEST>(L:A32NX_AUDIOSWITCHING_KNOB) 1 ==</STATE1_TEST>
                <STATE2_TEST>(L:A32NX_AUDIOSWITCHING_KNOB) 2 ==</STATE2_TEST>
            </UseTemplate>
        </Component>
    </Template>

    <Template Name="FBW_AIRLINER_Audio_Panel_SubTemplate">
        <DefaultTemplateParameters>
            <POTENTIOMETER_SEQ1></POTENTIOMETER_SEQ1>
            <DONT_OVERRIDE_BASE_EMISSIVE>False</DONT_OVERRIDE_BASE_EMISSIVE>
            <SEQ1_POWERED>
                #ID# 3 &lt; if{
                    (L:A32NX_ELEC_DC_ESS_BUS_IS_POWERED, Bool) (L:A32NX_RMP_#SIDE#_TOGGLE_SWITCH, bool) and
                } els{
                    (L:A32NX_ELEC_DC_1_BUS_IS_POWERED, Bool)
                }
            </SEQ1_POWERED>
            <Condition Valid="SEQ2_POWERED">
                <True>
                    <SEQ2_EMISSIVE_CODE>#SEQ2_POWERED#</SEQ2_EMISSIVE_CODE>
                </True>
                <False>
                    <SEQ2_EMISSIVE_CODE>1</SEQ2_EMISSIVE_CODE>
                </False>
            </Condition>
            <KNOB_TEMPLATE>ASOBO_GT_Knob_Finite_Switch</KNOB_TEMPLATE>
            <ANIM_CODE_PARAM_NAME>ANIM_CODE_SWITCH</ANIM_CODE_PARAM_NAME>
            <SEQ1_EMISSIVE_DRIVES_VISIBILITY>False</SEQ1_EMISSIVE_DRIVES_VISIBILITY>
            <SEQ2_EMISSIVE_DRIVES_VISIBILITY>False</SEQ2_EMISSIVE_DRIVES_VISIBILITY>
        </DefaultTemplateParameters>
        <OverrideTemplateParameters>
        </OverrideTemplateParameters>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_VHF_L#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_VHF_L#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_VHF_L#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_VHF_L#</ANIM_NAME_SWITCH>
            <FREQ_ID>VHF1</FREQ_ID>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_L_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_L_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_L_AUDIO_TOGGLE</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Push_Transmit_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_BUTTON_VHF_L#</NODE_ID>
            <ANIM_NAME>#ANIM_NAME_BUTTON_VHF_L#</ANIM_NAME>
            <NODE_ID_SEQ1>#NODE_ID_BUTTON_SEQ1_VHF_L#</NODE_ID_SEQ1>
            <NODE_ID_SEQ2>#NODE_ID_BUTTON_SEQ2_VHF_L#</NODE_ID_SEQ2>
            <FREQ_ID>VHF1</FREQ_ID>
            <TRANSMIT_ID>0</TRANSMIT_ID>
            <TOOLTIP_PB>TT:COCKPIT.TOOLTIPS.TRANSMITTER_SELECT_VHF_L</TOOLTIP_PB>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_VHF_C#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_VHF_C#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_VHF_C#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_VHF_C#</ANIM_NAME_SWITCH>
            <FREQ_ID>VHF2</FREQ_ID>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_C_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_C_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_C_AUDIO_TOGGLE</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Push_Transmit_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_BUTTON_VHF_C#</NODE_ID>
            <ANIM_NAME>#ANIM_NAME_BUTTON_VHF_C#</ANIM_NAME>
            <NODE_ID_SEQ1>#NODE_ID_BUTTON_SEQ1_VHF_C#</NODE_ID_SEQ1>
            <NODE_ID_SEQ2>#NODE_ID_BUTTON_SEQ2_VHF_C#</NODE_ID_SEQ2>
            <FREQ_ID>VHF2</FREQ_ID>
            <TRANSMIT_ID>1</TRANSMIT_ID>
            <TOOLTIP>TT:COCKPIT.TOOLTIPS.TRANSMITTER_SELECT_VHF_C</TOOLTIP>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_VHF_R#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_VHF_R#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_VHF_R#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_VHF_R#</ANIM_NAME_SWITCH>
            <FREQ_ID>VHF3</FREQ_ID>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_R_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_R_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VHF_R_AUDIO_TOGGLE</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Push_Transmit_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_BUTTON_VHF_R#</NODE_ID>
            <ANIM_NAME>#ANIM_NAME_BUTTON_VHF_R#</ANIM_NAME>
            <NODE_ID_SEQ1>#NODE_ID_BUTTON_SEQ1_VHF_R#</NODE_ID_SEQ1>
            <NODE_ID_SEQ2>#NODE_ID_BUTTON_SEQ2_VHF_R#</NODE_ID_SEQ2>
            <FREQ_ID>VHF3</FREQ_ID>
            <TRANSMIT_ID>2</TRANSMIT_ID>
            <TOOLTIP>TT:COCKPIT.TOOLTIPS.TRANSMITTER_SELECT_VHF_R</TOOLTIP>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_HF1#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_HF1#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_HF1#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_HF1#</ANIM_NAME_SWITCH>
            <FREQ_ID>HF1</FREQ_ID>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_HF_L_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_HF_L_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>TT:COCKPIT.TOOLTIPS.TRANSMITTER_HF_L_AUDIO_TOGGLE</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Push_Transmit_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_BUTTON_HF1#</NODE_ID>
            <ANIM_NAME>#ANIM_NAME_BUTTON_HF1#</ANIM_NAME>
            <NODE_ID_SEQ1>#NODE_ID_BUTTON_SEQ1_HF1#</NODE_ID_SEQ1>
            <NODE_ID_SEQ2>#NODE_ID_BUTTON_SEQ2_HF1#</NODE_ID_SEQ2>
            <FREQ_ID>HF1</FREQ_ID>
            <TRANSMIT_ID>3</TRANSMIT_ID>
            <TOOLTIP>TT:COCKPIT.TOOLTIPS.TRANSMITTER_SELECT_HF_L</TOOLTIP>
        </UseTemplate>

        <!-- TRANSMIT_ID not 4 due to PILOT/COPILOT_TRANSMITTER_SET. If set to 4, the pilot/copilot does not listen to any channel -->
        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_HF2#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_HF2#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_HF2#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_HF2#</ANIM_NAME_SWITCH>
            <FREQ_ID>HF2</FREQ_ID>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_HF_R_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_HF_R_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>TT:COCKPIT.TOOLTIPS.TRANSMITTER_HF_R_AUDIO_TOGGLE</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Push_Transmit_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_BUTTON_HF2#</NODE_ID>
            <ANIM_NAME>#ANIM_NAME_BUTTON_HF2#</ANIM_NAME>
            <NODE_ID_SEQ1>#NODE_ID_BUTTON_SEQ1_HF2#</NODE_ID_SEQ1>
            <NODE_ID_SEQ2>#NODE_ID_BUTTON_SEQ2_HF2#</NODE_ID_SEQ2>
            <FREQ_ID>HF2</FREQ_ID>
            <TRANSMIT_ID>5</TRANSMIT_ID>
            <TOOLTIP>TT:COCKPIT.TOOLTIPS.TRANSMITTER_SELECT_HF_R</TOOLTIP>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_MECH#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_MECH#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_MECH#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_MECH#</ANIM_NAME_SWITCH>
            <FREQ_ID>MECH</FREQ_ID>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_INT_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_INT_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>TT:COCKPIT.TOOLTIPS.TRANSMITTER_INT_AUDIO_TOGGLE</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Push_Transmit_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_BUTTON_MECH#</NODE_ID>
            <ANIM_NAME>#ANIM_NAME_BUTTON_MECH#</ANIM_NAME>
            <NODE_ID_SEQ1>#NODE_ID_BUTTON_SEQ1_MECH#</NODE_ID_SEQ1>
            <NODE_ID_SEQ2>#NODE_ID_BUTTON_SEQ2_MECH#</NODE_ID_SEQ2>
            <FREQ_ID>MECH</FREQ_ID>
            <TRANSMIT_ID>6</TRANSMIT_ID>
            <TOOLTIP>TT:COCKPIT.TOOLTIPS.TRANSMITTER_SELECT_INT</TOOLTIP>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_ATT#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_ATT#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_ATT#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_ATT#</ANIM_NAME_SWITCH>
            <FREQ_ID>ATT</FREQ_ID>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_CAB_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_CAB_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>TT:COCKPIT.TOOLTIPS.TRANSMITTER_CAB_AUDIO_TOGGLE</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Push_Transmit_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_BUTTON_ATT#</NODE_ID>
            <ANIM_NAME>#ANIM_NAME_BUTTON_ATT#</ANIM_NAME>
            <NODE_ID_SEQ1>#NODE_ID_BUTTON_SEQ1_ATT#</NODE_ID_SEQ1>
            <NODE_ID_SEQ2>#NODE_ID_BUTTON_SEQ2_ATT#</NODE_ID_SEQ2>
            <FREQ_ID>ATT</FREQ_ID>
            <TRANSMIT_ID>7</TRANSMIT_ID>
            <TOOLTIP>TT:COCKPIT.TOOLTIPS.TRANSMITTER_SELECT_CAB</TOOLTIP>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_PA#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_PA#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_PA#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_PA#</ANIM_NAME_SWITCH>
            <FREQ_ID>PA</FREQ_ID>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_PA_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_PA_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>TT:COCKPIT.TOOLTIPS.TRANSMITTER_PA_AUDIO_TOGGLE</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_Push_Transmit_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_BUTTON_PA#</NODE_ID>
            <ANIM_NAME>#ANIM_NAME_BUTTON_PA#</ANIM_NAME>
            <NODE_ID_SEQ1>#NODE_ID_BUTTON_SEQ1_PA#</NODE_ID_SEQ1>
            <NODE_ID_SEQ2>#NODE_ID_BUTTON_SEQ2_PA#</NODE_ID_SEQ2>
            <FREQ_ID>PA</FREQ_ID>
            <TRANSMIT_ID>8</TRANSMIT_ID>
            <TOOLTIPID>TT:COCKPIT.TOOLTIPS.TRANSMITTER_SELECT_PA</TOOLTIPID>
        </UseTemplate>

        <UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <NODE_ID>#NODE_ID_RECEIVER_VOICE#</NODE_ID>
            <ANIM_NAME>#ANIM_NAME_PUSH_RECEIVER_VOICE#</ANIM_NAME>
            <SEQ1_NODE_ID>#NODE_ID_BUTTON_VOICE_SEQ1#</SEQ1_NODE_ID>
            <SEQ2_NODE_ID>#NODE_ID_BUTTON_VOICE_SEQ2#</SEQ2_NODE_ID>
            <LEFT_SINGLE_CODE>
                (L:A32NX_ACP_NAV_#SIDE#_VOICE_KNOB_VOLUME_DOWN) ! (&gt;L:A32NX_ACP_NAV_#SIDE#_VOICE_KNOB_VOLUME_DOWN)
                1 (&gt;L:XMLVAR_NAV_UpdateReceivers)
            </LEFT_SINGLE_CODE>
            <WWISE_EVENT_1>fcubutton</WWISE_EVENT_1>
            <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
            <WWISE_EVENT_2>fcubutton</WWISE_EVENT_2>
            <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
            <SEQ1_EMISSIVE_CODE>(L:A32NX_ACP_NAV_#SIDE#_VOICE_KNOB_VOLUME_DOWN)</SEQ1_EMISSIVE_CODE>
            <TOOLTIPID>%((L:A32NX_ACP_NAV_#SIDE#_VOICE_KNOB_VOLUME_DOWN))%{if}TT:COCKPIT.TOOLTIPS.NAV_PUSHBUTTON_VOICE_OFF%{else}TT:COCKPIT.TOOLTIPS.NAV_PUSHBUTTON_VOICE_ON%{end}</TOOLTIPID>
        </UseTemplate>

        <UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
            <ANIM_TYPE>BUTTON</ANIM_TYPE>
            <NODE_ID>#NODE_ID_RECEIVER_RESET#</NODE_ID>
            <ANIM_NAME>#ANIM_NAME_PUSH_RECEIVER_RESET#</ANIM_NAME>
            <LEFT_SINGLE_CODE>
                0 (&gt;L:XMLVAR_ACP_CALLED_MECH)
                0 (&gt;L:XMLVAR_ACP_CALLED_ATT)
            </LEFT_SINGLE_CODE>
            <WWISE_EVENT_1>fcubutton</WWISE_EVENT_1>
            <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
            <WWISE_EVENT_2>fcubutton</WWISE_EVENT_2>
            <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
            <TOOLTIPID>TT:COCKPIT.TOOLTIPS.NAV_PUSHBUTTON_RESET</TOOLTIPID>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_NAV_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_VOR1#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_VOR1#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_VOR1#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_VOR1#</ANIM_NAME_SWITCH>
            <INSTRUMENT>VOR1</INSTRUMENT>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VOR1_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VOR1_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>%((L:A32NX_ACP_NAV_#SIDE#_VOR1_KNOB_VOLUME_DOWN))%{if}TT:INPUT.KEY_RADIO_VOR1_IDENT_DISABLE_DESC%{else}TT:INPUT.KEY_RADIO_VOR1_IDENT_ENABLE_DESC%{end}</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_NAV_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_VOR2#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_VOR2#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_VOR2#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_VOR2#</ANIM_NAME_SWITCH>
            <INSTRUMENT>VOR2</INSTRUMENT>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VOR2_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_VOR2_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>%((L:A32NX_ACP_NAV_#SIDE#_VOR2_KNOB_VOLUME_DOWN))%{if}TT:INPUT.KEY_RADIO_VOR2_IDENT_DISABLE_DESC%{else}TT:INPUT.KEY_RADIO_VOR2_IDENT_ENABLE_DESC%{end}</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_NAV_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_MKR#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_MKR#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_MKR#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_MKR#</ANIM_NAME_SWITCH>
            <INSTRUMENT>MKR</INSTRUMENT>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.NAV_KNOB_MARKERS_VOLUME_DECREASE</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.NAV_KNOB_MARKERS_VOLUME_INCREASE</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>%((L:A32NX_ACP_NAV_#SIDE#_MKR_KNOB_VOLUME_DOWN))%{if}TT:COCKPIT.TOOLTIPS.NAV_KNOB_MARKERS_IDENT_DISABLE%{else}TT:COCKPIT.TOOLTIPS.NAV_KNOB_MARKERS_IDENT_ENABLE%{end}</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_NAV_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_ILS#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_ILS#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_ILS#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_ILS#</ANIM_NAME_SWITCH>
            <NODE_ID_LED>#NODE_ID_LED_RECEIVER_ILS#</NODE_ID_LED>
            <INSTRUMENT>ILS</INSTRUMENT>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_VOLUME_DECREASE</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_VOLUME_INCREASE</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>%((L:A32NX_ACP_NAV_#SIDE#_ILS_KNOB_VOLUME_DOWN))%{if}TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_IDENT_DISABLE%{else}TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_IDENT_ENABLE%{end}</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_NAV_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_MLS#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_MLS#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_MLS#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_MLS#</ANIM_NAME_SWITCH>
            <NODE_ID_LED>#NODE_ID_LED_RECEIVER_MLS#</NODE_ID_LED>
            <INSTRUMENT>MLS</INSTRUMENT>
            <INC_VOLUME>(L:A32NX_ACP_NAV_#SIDE#_MLS_Volume) #VOLUME_INCREMENT_NAV# + 1 min (&gt;L:A32NX_ACP_NAV_#SIDE#_MLS_Volume)</INC_VOLUME>
            <DEC_VOLUME>(L:A32NX_ACP_NAV_#SIDE#_MLS_Volume) #VOLUME_INCREMENT_NAV# - 0 max (&gt;L:A32NX_ACP_NAV_#SIDE#_MLS_Volume)</DEC_VOLUME>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_VOLUME_DECREASE</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_VOLUME_INCREASE</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>%((L:A32NX_ACP_NAV_#SIDE#_MLS_KNOB_VOLUME_DOWN))%{if}TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_IDENT_DISABLE%{else}TT:COCKPIT.TOOLTIPS.NAV_KNOB_ILS_IDENT_ENABLE%{end}</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_NAV_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_ADF1#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_ADF1#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_ADF1#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_ADF1#</ANIM_NAME_SWITCH>
            <NODE_ID_LED>#NODE_ID_LED_RECEIVER_ADF1#</NODE_ID_LED>
            <INSTRUMENT>ADF1</INSTRUMENT>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_ADF1_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_ADF1_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>%((L:A32NX_ACP_NAV_#SIDE#_ADF1_KNOB_VOLUME_DOWN))%{if}TT:INPUT.KEY_RADIO_ADF_IDENT_DISABLE_DESC%{else}TT:INPUT.KEY_RADIO_ADF_IDENT_ENABLE_DESC%{end}</TOOLTIP_HAND>
        </UseTemplate>

        <UseTemplate Name="FBW_Anim_Interactions">
            <ANIM_TYPE>KNOB</ANIM_TYPE>
            <ANIM_TEMPLATE>FBW_AIRLINER_Audio_NAV_Volume_Knob_Template</ANIM_TEMPLATE>
            <NODE_ID>#NODE_ID_RECEIVER_ADF2#</NODE_ID>
            <NODE_ID_LIGHT>#NODE_ID_LIGHT_RECEIVER_ADF2#</NODE_ID_LIGHT>
            <ANIM_NAME_KNOB>#ANIM_NAME_KNOB_RECEIVER_ADF2#</ANIM_NAME_KNOB>
            <ANIM_NAME_SWITCH>#ANIM_NAME_PUSH_RECEIVER_ADF2#</ANIM_NAME_SWITCH>
            <NODE_ID_LED>#NODE_ID_LED_RECEIVER_ADF2#</NODE_ID_LED>
            <INSTRUMENT>ADF2</INSTRUMENT>
            <TOOLTIP_LEFT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_ADF2_VOLUME_DEC</TOOLTIP_LEFT>
            <TOOLTIP_RIGHT>TT:COCKPIT.TOOLTIPS.TRANSMITTER_ADF2_VOLUME_INC</TOOLTIP_RIGHT>
            <TOOLTIP_HAND>%((L:A32NX_ACP_NAV_#SIDE#_ADF2_KNOB_VOLUME_DOWN))%{if}TT:INPUT.KEY_RADIO_ADF2_IDENT_DISABLE_DESC%{else}TT:INPUT.KEY_RADIO_ADF2_IDENT_ENABLE_DESC%{end}</TOOLTIP_HAND>
        </UseTemplate>

        <Component ID="RMP_SWITCH_INT_#SIDE#" Node="#NODE_ID_SWITCH_INT#">
            <UseTemplate Name="FBW_Anim_Interactions">
                <ANIM_TYPE>SWITCH</ANIM_TYPE>
                <ANIM_TEMPLATE>ASOBO_GT_Switch_Code</ANIM_TEMPLATE>
                <ANIM_LENGTH>100</ANIM_LENGTH>
                <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
                <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
                <ANIM_NAME>#NODE_ID_SWITCH_INT#</ANIM_NAME>
                <WWISE_EVENT_1>lswitch</WWISE_EVENT_1>
                <WWISE_EVENT_2>lswitch</WWISE_EVENT_2>
                <ANIM_CODE>(L:A32NX_RMP_#SIDE#_SWITCH_INT, number)</ANIM_CODE>
                <LEFT_SINGLE_CODE>
                    (L:A32NX_RMP_#SIDE#_SWITCH_INT, number) 50 + (&gt;L:A32NX_RMP_#SIDE#_SWITCH_INT, number)
                </LEFT_SINGLE_CODE>
            </UseTemplate>
        </Component>
    </Template>

    <Template Name="FBW_AIRLINER_Audio_Push_Transmit_Template">
            <DefaultTemplateParameters>
                <EMISSIVE_DIM>(L:A32NX_OVHD_INTLT_ANN, number) 2 == if{ 0.1 } els{ 1 }</EMISSIVE_DIM>
                <!--
                    A32NX_ACP2_TRANSMIT_CHANNEL into COPILOT_TRANSMITTER_SET because PILOT_TRANSMITTER_SET sets it for the copilot too
                    #TRANSMIT_ID# 3 &lt; due to being able to listen to COM1/2/3 only
                -->
                <LEFT_SINGLE_CODE type="rnp">
                    if (#SEQ1_POWERED, bool#) {
                        let transmitChannel = (L:A32NX_ACP#ID#_TRANSMIT_CHANNEL, number);
                        let transmitID = #TRANSMIT_ID, number#;
                        let saveCopilot = (A:COPILOT TRANSMITTER TYPE, number);
                        let audioSwitchingKnob = (L:A32NX_AUDIOSWITCHING_KNOB, number);
                        let id = #ID, number#;

                        if transmitID == transmitChannel {
                            // 4 is the NONE value within the SDK
                            (L:A32NX_ACP#ID#_TRANSMIT_CHANNEL) = 4;
                        } else {
                            (L:A32NX_ACP#ID#_TRANSMIT_CHANNEL) = transmitID;
                        }

                        // Due to being able to listen to COM1/2/3 only
                        if transmitID &lt; 3 {
                            if id == 1 or id == 3 and audioSwitchingKnob == 0 {
                                if transmitID == (A:PILOT TRANSMITTER TYPE, number) {
                                    // 4 is the NONE value within the SDK
                                    (K:PILOT_TRANSMITTER_SET) = 4;
                                } else {
                                    (K:PILOT_TRANSMITTER_SET) = transmitID;
                                }
                                // COPILOT_TRANSMITTER_SET because PILOT_TRANSMITTER_SET sets the copilot too
                                (K:COPILOT_TRANSMITTER_SET) = saveCopilot;
                            }

                            if id == 2 or id == 3 and audioSwitchingKnob == 2 {
                                if transmitID == (A:COPILOT TRANSMITTER TYPE, number) {
                                    // 4 is the NONE value within the SDK
                                    (K:COPILOT_TRANSMITTER_SET) = 4;
                                } else {
                                     (K:COPILOT_TRANSMITTER_SET) = transmitID;
                                }
                            }
                        }
                    }
                </LEFT_SINGLE_CODE>
            </DefaultTemplateParameters>
            <UseTemplate Name="ASOBO_GT_Push_Button_Airliner">
                <!-- Green light -->
                <SEQ1_EMISSIVE_CODE>
                    #SEQ1_POWERED# if{
                        #TRANSMIT_ID# (L:A32NX_ACP#ID#_TRANSMIT_CHANNEL) == (L:A32NX_OVHD_INTLT_ANN) 0 == or #EMISSIVE_DIM# *
                    }
                </SEQ1_EMISSIVE_CODE>
                    <!-- Button name light (for example CALL or MECH)-->
                <SEQ2_EMISSIVE_CODE>
                    #SEQ1_POWERED# if{
                        #TRANSMIT_ID# (L:A32NX_ACP#ID#_TRANSMIT_CHANNEL) == (L:A32NX_OVHD_INTLT_ANN) 0 == or #EMISSIVE_DIM# *
                    }
                </SEQ2_EMISSIVE_CODE>
                <WWISE_EVENT_1>fcubutton</WWISE_EVENT_1>
                <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
                <WWISE_EVENT_2>fcubutton</WWISE_EVENT_2>
                <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
            </UseTemplate>
    </Template>

    <Template Name="FBW_AIRLINER_Audio_Volume_Knob_Template">
        <DefaultTemplateParameters>
            <TOOLTIP_LEFT></TOOLTIP_LEFT>
            <TOOLTIP_RIGHT></TOOLTIP_RIGHT>
            <TOOLTIP_HAND></TOOLTIP_HAND>
            <TOOLTIP_PB></TOOLTIP_PB>
            <KNOB_TEMPLATE>ASOBO_GT_Knob_Finite_Switch</KNOB_TEMPLATE>
            <ANIM_KNOB_PARAM_NAME>ANIM_CODE_SWITCH</ANIM_KNOB_PARAM_NAME>
            <EMISSIVE_DIM>(L:A32NX_OVHD_INTLT_ANN, number) 2 == if{ 0.1 } els{ 1 }</EMISSIVE_DIM>
        </DefaultTemplateParameters>
        <OverrideTemplateParameters>
            <TRANSMIT_EMISSIVE_CODE>
                #SEQ1_POWERED# ! if{
                    0
                } els{
                    1 (L:A32NX_ACP#ID#_#FREQ_ID#_KNOB_VOLUME_DOWN) == (L:A32NX_OVHD_INTLT_ANN) 0 == or if{
                        3.0 #EMISSIVE_DIM# *
                    } els{
                        0.1 #EMISSIVE_DIM# *
                    }
                }
            </TRANSMIT_EMISSIVE_CODE>
        </OverrideTemplateParameters>

        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <UseTemplate Name="#KNOB_TEMPLATE#">
                <ANIM_NAME>#ANIM_NAME_KNOB#</ANIM_NAME>
                <ANIMREF_ID>1</ANIMREF_ID>
                <ANIMCURSOR_MIN>0</ANIMCURSOR_MIN>
                <ANIMCURSOR_MAX>1</ANIMCURSOR_MAX>
                <ANIMTIP_0_ON_CURSOR>TurnLeft</ANIMTIP_0_ON_CURSOR>
                <ANIMTIP_1_ON_CURSOR>TurnRight</ANIMTIP_1_ON_CURSOR>
                <ANIMTIP_2_ON_CURSOR>Hand</ANIMTIP_2_ON_CURSOR>
                <ANIMTIP_0>#TOOLTIP_LEFT#</ANIMTIP_0>
                <ANIMTIP_1>#TOOLTIP_RIGHT#</ANIMTIP_1>
                <ANIMTIP_2>#TOOLTIP_HAND#</ANIMTIP_2>
                <PUSH>True</PUSH>
                <USE_SIMVAR_FOR_BUTTON_ANIM>False</USE_SIMVAR_FOR_BUTTON_ANIM>
                <USE_SIMVAR_FOR_KNOB_ANIM>False</USE_SIMVAR_FOR_KNOB_ANIM>
                <CENTER_RADIUS>0.002</CENTER_RADIUS>
                <KNOB_ANIM_CODE>(L:A32NX_ACP#ID#_#FREQ_ID#_VOLUME) 100 *</KNOB_ANIM_CODE>
                <CLOCKWISE_CODE>
                    0 (L:A32NX_ACP#ID#_#FREQ_ID#_KNOB_VOLUME_DOWN) == if{
                        (L:A32NX_ACP#ID#_#FREQ_ID#_VOLUME) #VOLUME_INCREMENT_HARD# + 1 min (&gt;L:A32NX_ACP#ID#_#FREQ_ID#_VOLUME)
                    } els{
                        (L:A32NX_ACP#ID#_#FREQ_ID#_VOLUME) #VOLUME_INCREMENT# + 1 min (&gt;L:A32NX_ACP#ID#_#FREQ_ID#_VOLUME)
                    }

                    1 (&gt;L:XMLVAR_COM_UpdateReceivers)
                </CLOCKWISE_CODE>
                <ANTICLOCKWISE_CODE>
                    0 (L:A32NX_ACP#ID#_#FREQ_ID#_KNOB_VOLUME_DOWN) == if{
                        (L:A32NX_ACP#ID#_#FREQ_ID#_VOLUME) #VOLUME_INCREMENT_HARD# - 0 max (&gt;L:A32NX_ACP#ID#_#FREQ_ID#_VOLUME)
                    } els{
                        (L:A32NX_ACP#ID#_#FREQ_ID#_VOLUME) #VOLUME_INCREMENT# - 0 max (&gt;L:A32NX_ACP#ID#_#FREQ_ID#_VOLUME)
                    }

                    1 (&gt;L:XMLVAR_COM_UpdateReceivers)
                </ANTICLOCKWISE_CODE>
                <ANIM_CODE_SWITCH>(L:A32NX_ACP#ID#_#FREQ_ID#_KNOB_VOLUME_DOWN) 100 *</ANIM_CODE_SWITCH>
                <ANIM_NAME_PUSH>#ANIM_NAME_SWITCH#</ANIM_NAME_PUSH>
                <LEFT_SINGLE_CODE>
                    #SEQ1_POWERED# if{
                        (L:A32NX_ACP#ID#_#FREQ_ID#_KNOB_VOLUME_DOWN) ! (&gt;L:A32NX_ACP#ID#_#FREQ_ID#_KNOB_VOLUME_DOWN)
                        1 (&gt;L:XMLVAR_COM_UpdateReceivers)
                    }
                </LEFT_SINGLE_CODE>
                <SEQ1_EMISSIVE_CODE>
                    #SEQ1_POWERED# if{
                        1 (L:A32NX_ACP#ID#_#FREQ_ID#_KNOB_VOLUME_DOWN) == (L:A32NX_OVHD_INTLT_ANN) 0 == or #EMISSIVE_DIM# *
                    }
                </SEQ1_EMISSIVE_CODE>
                <WWISE_EVENT></WWISE_EVENT>
                <WWISE_EVENT_1>mcdubuttons</WWISE_EVENT_1>
                <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
                <WWISE_EVENT_2>mcdubuttons</WWISE_EVENT_2>
                <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
                <COUNT>36</COUNT>
            </UseTemplate>
        </Component>

        <Component ID="#NODE_ID_LIGHT#_Light" Node="#NODE_ID_LIGHT#">
            <UseTemplate Name="ASOBO_GT_Emissive_Gauge">
                <EMISSIVE_CODE>#TRANSMIT_EMISSIVE_CODE#</EMISSIVE_CODE>
            </UseTemplate>
        </Component>
    </Template>

    <Template Name="FBW_AIRLINER_Audio_NAV_Volume_Knob_Template">
        <DefaultTemplateParameters>
            <TOOLTIP_LEFT></TOOLTIP_LEFT>
            <TOOLTIP_RIGHT></TOOLTIP_RIGHT>
            <TOOLTIP_HAND></TOOLTIP_HAND>
            <TOOLTIP_PB></TOOLTIP_PB>
            <KNOB_TEMPLATE>ASOBO_GT_Knob_Finite_Switch</KNOB_TEMPLATE>
            <ANIM_KNOB_PARAM_NAME>#ANIM_CODE_SWITCH#</ANIM_KNOB_PARAM_NAME>
            <EMISSIVE_DIM>(L:A32NX_OVHD_INTLT_ANN, number) 2 == if{ 0.1 } els{ 1 }</EMISSIVE_DIM>
        </DefaultTemplateParameters>
        <OverrideTemplateParameters>
            <TRANSMIT_EMISSIVE_CODE>
                #SEQ1_POWERED# ! if{
                    0
                } els{
                    (L:A32NX_ACP_NAV_#SIDE#_#INSTRUMENT#_KNOB_VOLUME_DOWN) 1 == (L:A32NX_OVHD_INTLT_ANN) 0 == or if{
                        3.0 #EMISSIVE_DIM# *
                    } els{
                        0.1 #EMISSIVE_DIM# *
                    }
                }
            </TRANSMIT_EMISSIVE_CODE>
        </OverrideTemplateParameters>

        <Component ID="#NODE_ID#" Node="#NODE_ID#">
            <UseTemplate Name="#KNOB_TEMPLATE#">
                <ANIM_NAME>#ANIM_NAME_KNOB#</ANIM_NAME>
                <ANIMREF_ID>1</ANIMREF_ID>
                <ANIMCURSOR_MIN>0</ANIMCURSOR_MIN>
                <ANIMCURSOR_MAX>1</ANIMCURSOR_MAX>
                <ANIMTIP_0_ON_CURSOR>TurnLeft</ANIMTIP_0_ON_CURSOR>
                <ANIMTIP_1_ON_CURSOR>TurnRight</ANIMTIP_1_ON_CURSOR>
                <ANIMTIP_2_ON_CURSOR>Hand</ANIMTIP_2_ON_CURSOR>
                <ANIMTIP_0>#TOOLTIP_LEFT#</ANIMTIP_0>
                <ANIMTIP_1>#TOOLTIP_RIGHT#</ANIMTIP_1>
                <ANIMTIP_2>#TOOLTIP_HAND#</ANIMTIP_2>
                <PUSH>True</PUSH>
                <USE_SIMVAR_FOR_BUTTON_ANIM>False</USE_SIMVAR_FOR_BUTTON_ANIM>
                <USE_SIMVAR_FOR_KNOB_ANIM>False</USE_SIMVAR_FOR_KNOB_ANIM>
                <CENTER_RADIUS>0.002</CENTER_RADIUS>
                <KNOB_ANIM_CODE>(L:A32NX_ACP_NAV_#SIDE#_#INSTRUMENT#_Volume) 100 *</KNOB_ANIM_CODE>
                <CLOCKWISE_CODE>
                    (L:A32NX_ACP_NAV_#SIDE#_#INSTRUMENT#_VOLUME) #VOLUME_INCREMENT_NAV# + 1 min (&gt;L:A32NX_ACP_NAV_#SIDE#_#INSTRUMENT#_VOLUME)
                    1 (&gt;L:XMLVAR_NAV_UpdateReceivers)
                </CLOCKWISE_CODE>
                <ANTICLOCKWISE_CODE>
                    (L:A32NX_ACP_NAV_#SIDE#_#INSTRUMENT#_VOLUME) #VOLUME_INCREMENT_NAV# - 0 max (&gt;L:A32NX_ACP_NAV_#SIDE#_#INSTRUMENT#_VOLUME)
                    1 (&gt;L:XMLVAR_NAV_UpdateReceivers)
                </ANTICLOCKWISE_CODE>
                <ANIM_CODE_SWITCH> (L:A32NX_ACP_NAV_#SIDE#_#INSTRUMENT#_KNOB_VOLUME_DOWN) 100 *</ANIM_CODE_SWITCH>
                <ANIM_NAME_PUSH>#ANIM_NAME_SWITCH#</ANIM_NAME_PUSH>
                <LEFT_SINGLE_CODE>
                    (L:A32NX_ACP_NAV_#SIDE#_#INSTRUMENT#_KNOB_VOLUME_DOWN) ! (&gt;L:A32NX_ACP_NAV_#SIDE#_#INSTRUMENT#_KNOB_VOLUME_DOWN)
                    1 (&gt;L:XMLVAR_NAV_UpdateReceivers)
                </LEFT_SINGLE_CODE>
                <WWISE_EVENT></WWISE_EVENT>
                <WWISE_EVENT_1>mcdubuttons</WWISE_EVENT_1>
                <NORMALIZED_TIME_1>0.1</NORMALIZED_TIME_1>
                <WWISE_EVENT_2>mcdubuttons</WWISE_EVENT_2>
                <NORMALIZED_TIME_2>0.5</NORMALIZED_TIME_2>
                <COUNT>36</COUNT>
            </UseTemplate>
        </Component>

        <Component ID="#NODE_ID_LIGHT#_Light" Node="#NODE_ID_LIGHT#">
            <UseTemplate Name="ASOBO_GT_Emissive_Gauge">
                <EMISSIVE_CODE>#TRANSMIT_EMISSIVE_CODE#</EMISSIVE_CODE>
            </UseTemplate>
        </Component>
    </Template>

    <!-- Used two templates due to the number of variables leading to an error of registers -->
    <Template Name="FBW_AIRLINER_Audio_Panel_NAV_Updater">
        <UseTemplate Name="ASOBO_GT_Update">
            <FREQUENCY>15</FREQUENCY>
            <UPDATE_CODE type="rnp">
                if (L:XMLVAR_NAV_UpdateReceivers, bool) {
                    let audioSwitchingKnob = (L:A32NX_AUDIOSWITCHING_KNOB, number);

                    // VORs ACP1 and ACP2
                    let knobVOR1ACP1 = (L:A32NX_ACP_NAV_L_VOR1_KNOB_VOLUME_DOWN, number);
                    let knobVOR1ACP2 = (L:A32NX_ACP_NAV_R_VOR1_KNOB_VOLUME_DOWN, number);
                    let knobVOR2ACP1 = (L:A32NX_ACP_NAV_L_VOR2_KNOB_VOLUME_DOWN, number);
                    let knobVOR2ACP2 = (L:A32NX_ACP_NAV_R_VOR2_KNOB_VOLUME_DOWN, number);
                    let volumeVOR1ACP1 = knobVOR1ACP1 * (L:A32NX_ACP_NAV_L_VOR1_VOLUME, number) * 100;
                    let volumeVOR1ACP2 = knobVOR1ACP2 * (L:A32NX_ACP_NAV_R_VOR1_VOLUME, number) * 100;
                    let volumeVOR2ACP1 = knobVOR2ACP1 * (L:A32NX_ACP_NAV_L_VOR2_VOLUME, number) * 100;
                    let volumeVOR2ACP2 = knobVOR2ACP2 * (L:A32NX_ACP_NAV_R_VOR2_VOLUME, number) * 100;

                    // ADFs ACP1 and ACP2
                    let knobADF1ACP1 = (L:A32NX_ACP_NAV_L_ADF1_KNOB_VOLUME_DOWN, number);
                    let knobADF1ACP2 = (L:A32NX_ACP_NAV_R_ADF1_KNOB_VOLUME_DOWN, number);
                    let knobADF2ACP1 = (L:A32NX_ACP_NAV_L_ADF2_KNOB_VOLUME_DOWN, number);
                    let knobADF2ACP2 = (L:A32NX_ACP_NAV_R_ADF2_KNOB_VOLUME_DOWN, number);
                    let volumeADF1ACP1 = knobADF1ACP1 * (L:A32NX_ACP_NAV_L_ADF1_VOLUME, number) * 100;
                    let volumeADF1ACP2 = knobADF1ACP2 * (L:A32NX_ACP_NAV_R_ADF1_VOLUME, number) * 100;
                    let volumeADF2ACP1 = knobADF2ACP1 * (L:A32NX_ACP_NAV_L_ADF2_VOLUME, number) * 100;
                    let volumeADF2ACP2 = knobADF2ACP2 * (L:A32NX_ACP_NAV_R_ADF2_VOLUME, number) * 100;

                    // ILS and GLS ACP1 and ACP2
                    let knobILSACP1 = (L:A32NX_ACP_NAV_L_ILS_KNOB_VOLUME_DOWN, number);
                    let knobILSACP2 = (L:A32NX_ACP_NAV_R_ILS_KNOB_VOLUME_DOWN, number);
                    let knobMLSACP1 = (L:A32NX_ACP_NAV_L_MLS_KNOB_VOLUME_DOWN, number);
                    let knobMLSACP2 = (L:A32NX_ACP_NAV_R_MLS_KNOB_VOLUME_DOWN, number);
                    let volumeILSACP1 = knobILSACP1 * (L:A32NX_ACP_NAV_L_ILS_VOLUME, number) * 100;
                    let volumeILSACP2 = knobILSACP2 * (L:A32NX_ACP_NAV_R_ILS_VOLUME, number) * 100;
                    let volumeMLSACP1 = knobMLSACP1 * (L:A32NX_ACP_NAV_L_MLS_VOLUME, number) * 100;
                    let volumeMLSACP2 = knobMLSACP2 * (L:A32NX_ACP_NAV_R_MLS_VOLUME, number) * 100;

                    // Markers ACP1 and ACP2
                    let knobMKRACP1 = (L:A32NX_ACP_NAV_L_MKR_KNOB_VOLUME_DOWN, number);
                    let knobMKRACP2 = (L:A32NX_ACP_NAV_R_MKR_KNOB_VOLUME_DOWN, number);
                    let volumeMKRACP1 = knobMKRACP1 * (L:A32NX_ACP_NAV_L_MKR_VOLUME, number) * 100;
                    let volumeMKRACP2 = knobMKRACP2 * (L:A32NX_ACP_NAV_R_MKR_VOLUME, number) * 100;

                    // Use third ACP and either captain's or F/O's side depending of AudioSwitching knob position
                    if audioSwitchingKnob != 1 {
                        //VORs ACP3
                        let knobVOR1ACP3 = (L:A32NX_ACP_NAV_OVHD_VOR1_KNOB_VOLUME_DOWN, number);
                        let knobVOR2ACP3 = (L:A32NX_ACP_NAV_OVHD_VOR2_KNOB_VOLUME_DOWN, number);
                        let volumeVOR1ACP3 = knobVOR1ACP3 * (L:A32NX_ACP_NAV_OVHD_VOR1_VOLUME, number) * 100;
                        let volumeVOR2ACP3 = knobVOR2ACP3 * (L:A32NX_ACP_NAV_OVHD_VOR2_VOLUME, number) * 100;

                        // ADFs ACP3
                        let knobADF1ACP3 = (L:A32NX_ACP_NAV_OVHD_ADF1_KNOB_VOLUME_DOWN, number);
                        let knobADF2ACP3 = (L:A32NX_ACP_NAV_OVHD_ADF2_KNOB_VOLUME_DOWN, number);
                        let volumeADF1ACP3 = knobADF1ACP3 * (L:A32NX_ACP_NAV_OVHD_ADF1_VOLUME, number) * 100;
                        let volumeADF2ACP3 = knobADF2ACP3 * (L:A32NX_ACP_NAV_OVHD_ADF2_VOLUME, number) * 100;

                        // ILS and GLS ACP3
                        let knobILSACP3 = (L:A32NX_ACP_NAV_OVHD_ILS_KNOB_VOLUME_DOWN, number) * 100;
                        let knobMLSACP3 = (L:A32NX_ACP_NAV_OVHD_MLS_KNOB_VOLUME_DOWN, number) * 100;
                        let volumeILSACP3 = knobILSACP3 * (L:A32NX_ACP_NAV_OVHD_ILS_VOLUME, number) * 100;
                        let volumeMLSACP3 = knobMLSACP3 * (L:A32NX_ACP_NAV_OVHD_MLS_VOLUME, number) * 100;

                        // Markers ACP3
                        let knobMKRACP3 = (L:A32NX_ACP_NAV_OVHD_MKR_KNOB_VOLUME_DOWN, number);
                        let volumeMKRACP3 = knobMKRACP3 * (L:A32NX_ACP_NAV_OVHD_MKR_VOLUME, number) * 100;

                        // Use F/O's side as the knob is on captain's side
                        if audioSwitchingKnob == 0 {
                            let voice = (L:A32NX_ACP_NAV_OVHD_VOICE_KNOB_VOLUME_DOWN, bool) or (L:A32NX_ACP_NAV_R_VOICE_KNOB_VOLUME_DOWN, bool);

                            (K:ADF_VOLUME_SET) = volumeADF1ACP3.max(volumeADF1ACP2);
                            (K:ADF2_VOLUME_SET) = volumeADF2ACP3.max(volumeADF2ACP2);

                            (K:NAV1_VOLUME_SET_EX1) = volumeVOR1ACP3.max(volumeVOR1ACP2);
                            (K:NAV2_VOLUME_SET_EX1) = volumeVOR2ACP3.max(volumeVOR2ACP2);
                            (K:NAV3_VOLUME_SET_EX1) = volumeILSACP3.max(volumeILSACP2);
                            (K:NAV4_VOLUME_SET_EX1) = volumeMLSACP3.max(volumeMLSACP2);

                            (K:MARKER_VOLUME_SET) = volumeMKRACP3.max(volumeMKRACP2);

                            (K:RADIO_VOR1_IDENT_SET) = (knobVOR1ACP3 == 1 or knobVOR1ACP2 == 1) and !voice;
                            (K:RADIO_DME1_IDENT_SET) = (knobVOR1ACP3 == 1 or knobVOR1ACP2 == 1) and !voice;

                            (K:RADIO_VOR2_IDENT_SET) = (knobVOR2ACP3 == 1 or knobVOR2ACP2 == 1) and !voice;
                            (K:RADIO_DME2_IDENT_SET) = (knobVOR2ACP3 == 1 or knobVOR2ACP2 == 1) and !voice;

                            (K:RADIO_DME3_IDENT_SET) = (knobILSACP3 == 1 or knobILSACP2 == 1) and !voice;
                            (K:RADIO_DME4_IDENT_SET) = (knobMLSACP3 == 1 or knobMLSACP2 == 1) and !voice;

                            (K:RADIO_ADF_IDENT_SET) = (knobADF1ACP3 == 1 or knobADF1ACP2 == 1) and !voice;
                            (K:RADIO_ADF2_IDENT_SET) = (knobADF2ACP3 == 1 or knobADF2ACP2 == 1) and !voice;

                            (K:MARKER_SOUND_SET) = (knobMKRACP3 == 1 or knobMKRACP2 == 1) and !voice;
                        }

                        // Use captains's side as the knob is on F/0's side
                        if audioSwitchingKnob == 2 {
                            let voice = (L:A32NX_ACP_NAV_OVHD_VOICE_KNOB_VOLUME_DOWN, bool) or (L:A32NX_ACP_NAV_L_VOICE_KNOB_VOLUME_DOWN, bool);

                            (K:ADF_VOLUME_SET) = volumeADF1ACP3.max(volumeADF1ACP1);
                            (K:ADF2_VOLUME_SET) = volumeADF2ACP3.max(volumeADF2ACP1);

                            (K:NAV1_VOLUME_SET_EX1) = volumeVOR1ACP3.max(volumeVOR1ACP1);
                            (K:NAV2_VOLUME_SET_EX1) = volumeVOR2ACP3.max(volumeVOR2ACP1);
                            (K:NAV3_VOLUME_SET_EX1) = volumeILSACP3.max(volumeILSACP1);
                            (K:NAV4_VOLUME_SET_EX1) = volumeMLSACP3.max(volumeMLSACP1);

                            (K:MARKER_VOLUME_SET) = volumeMKRACP3.max(volumeMKRACP1);

                            (K:RADIO_VOR1_IDENT_SET) = (knobVOR1ACP3 == 1 or knobVOR1ACP1 == 1) and !voice;
                            (K:RADIO_DME1_IDENT_SET) = (knobVOR1ACP3 == 1 or knobVOR1ACP1 == 1) and !voice;

                            (K:RADIO_VOR2_IDENT_SET) = (knobVOR2ACP3 == 1 or knobVOR2ACP1 == 1) and !voice;
                            (K:RADIO_DME2_IDENT_SET) = (knobVOR2ACP3 == 1 or knobVOR2ACP1 == 1) and !voice;

                            (K:RADIO_DME3_IDENT_SET) = (knobILSACP3 == 1 or knobILSACP1 == 1) and !voice;
                            (K:RADIO_DME4_IDENT_SET) = (knobMLSACP3 == 1 or knobMLSACP1 == 1) and !voice;

                            (K:RADIO_ADF_IDENT_SET) = (knobADF1ACP3 == 1 or knobADF1ACP1 == 1) and !voice;
                            (K:RADIO_ADF2_IDENT_SET) = (knobADF2ACP3 == 1 or knobADF2ACP1 == 1) and !voice;

                            (K:MARKER_SOUND_SET) = (knobMKRACP3 == 1 or knobMKRACP1 == 1) and !voice;
                        }
                    } else {
                        // Use Captain and F/O's side
                        let voice = (L:A32NX_ACP_NAV_L_VOICE_KNOB_VOLUME_DOWN, bool) or (L:A32NX_ACP_NAV_R_VOICE_KNOB_VOLUME_DOWN, bool);

                        (K:ADF_VOLUME_SET) = volumeADF1ACP1.max(volumeADF1ACP2);
                        (K:ADF2_VOLUME_SET) = volumeADF2ACP1.max(volumeADF2ACP2);

                        (K:NAV1_VOLUME_SET_EX1) = volumeVOR1ACP1.max(volumeVOR1ACP2);
                        (K:NAV2_VOLUME_SET_EX1) = volumeVOR2ACP1.max(volumeVOR2ACP2);
                        (K:NAV3_VOLUME_SET_EX1) = volumeILSACP1.max(volumeILSACP2);
                        (K:NAV4_VOLUME_SET_EX1) = volumeMLSACP1.max(volumeMLSACP2);

                        (K:MARKER_VOLUME_SET) = volumeMKRACP1.max(volumeMKRACP2);

                        (K:RADIO_VOR1_IDENT_SET) = (knobVOR1ACP1 == 1 or knobVOR1ACP2 == 1) and !voice;
                        (K:RADIO_DME1_IDENT_SET) = (knobVOR1ACP1 == 1 or knobVOR1ACP2 == 1) and !voice;

                        (K:RADIO_VOR2_IDENT_SET) = (knobVOR2ACP1 == 1 or knobVOR2ACP2 == 1) and !voice;
                        (K:RADIO_DME2_IDENT_SET) = (knobVOR2ACP1 == 1 or knobVOR2ACP2 == 1) and !voice;

                        (K:RADIO_DME3_IDENT_SET) = (knobILSACP1 == 1 or knobILSACP2 == 1) and !voice;
                        (K:RADIO_DME4_IDENT_SET) = (knobMLSACP1 == 1 or knobMLSACP2 == 1) and !voice;

                        (K:RADIO_ADF_IDENT_SET) = (knobADF1ACP1 == 1 or knobADF1ACP2 == 1) and !voice;
                        (K:RADIO_ADF2_IDENT_SET) = (knobADF2ACP1 == 1 or knobADF2ACP2 == 1) and !voice;

                        (K:MARKER_SOUND_SET) = (knobMKRACP1 == 1 or knobMKRACP2 == 1) and !voice;
                    }

                    (L:XMLVAR_NAV_UpdateReceivers) = 0;
                }
            </UPDATE_CODE>
        </UseTemplate>
    </Template>

    <Template Name="FBW_AIRLINER_Audio_Panel_Updater">
        <UseTemplate Name="ASOBO_GT_Update">
            <FREQUENCY>15</FREQUENCY>
            <UPDATE_CODE type="rnp">
                <!--
                        DO NOT SET  0 (&gt;K:COM3_RECEIVE_SELECT) AS vPilot WOULD NOT BE WORKING ANYMORE

                        Here getting the maximum of one channel between the three ACPs.
                        Multiplying each by their "KNOB_VOLUME_DOWN" to take into account their value if the knob is pushed. 0 otherwise

                -->
                if (L:XMLVAR_COM_UpdateReceivers, bool) {
                    let audioSwitchingKnob = (L:A32NX_AUDIOSWITCHING_KNOB, number);

                    let knobCOM1ACP1 = (L:A32NX_ACP1_VHF1_KNOB_VOLUME_DOWN, number);
                    let knobCOM1ACP2 = (L:A32NX_ACP2_VHF1_KNOB_VOLUME_DOWN, number);
                    let knobCOM2ACP1 = (L:A32NX_ACP1_VHF2_KNOB_VOLUME_DOWN, number);
                    let knobCOM2ACP2 = (L:A32NX_ACP2_VHF2_KNOB_VOLUME_DOWN, number);
                    let knobCOM3ACP1 = (L:A32NX_ACP1_VHF3_KNOB_VOLUME_DOWN, number);
                    let knobCOM3ACP2 = (L:A32NX_ACP2_VHF3_KNOB_VOLUME_DOWN, number);

                    let volumeCOM1ACP1 = knobCOM1ACP1 * (L:A32NX_ACP1_VHF1_VOLUME, number);
                    let volumeCOM1ACP2 = knobCOM1ACP2 * (L:A32NX_ACP2_VHF1_VOLUME, number);
                    let volumeCOM2ACP1 = knobCOM2ACP1 * (L:A32NX_ACP1_VHF2_VOLUME, number);
                    let volumeCOM2ACP2 = knobCOM2ACP2 * (L:A32NX_ACP2_VHF2_VOLUME, number);
                    let volumeCOM3ACP1 = knobCOM3ACP1 * (L:A32NX_ACP1_VHF3_VOLUME, number);
                    let volumeCOM3ACP2 = knobCOM3ACP2 * (L:A32NX_ACP2_VHF3_VOLUME, number);

                    let volumeHF1ACP1 = (L:A32NX_ACP1_HF1_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP1_HF1_VOLUME, number);
                    let volumeHF1ACP2 = (L:A32NX_ACP2_HF1_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP2_HF1_VOLUME, number);
                    let volumeHF2ACP1 = (L:A32NX_ACP1_HF2_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP1_HF2_VOLUME, number);
                    let volumeHF2ACP2 = (L:A32NX_ACP2_HF2_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP2_HF2_VOLUME, number);

                    let volumePAACP1 = (L:A32NX_ACP1_PA_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP1_PA_VOLUME, number);
                    let volumePAACP2 = (L:A32NX_ACP2_PA_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP2_PA_VOLUME, number);
                    let volumeATTACP1 = (L:A32NX_ACP1_ATT_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP1_ATT_VOLUME, number);
                    let volumeATTACP2 = (L:A32NX_ACP2_ATT_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP2_ATT_VOLUME, number);
                    let volumeMECHACP1 = (L:A32NX_ACP1_MECH_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP1_MECH_VOLUME, number);
                    let volumeMECHACP2 = (L:A32NX_ACP2_MECH_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP2_MECH_VOLUME, number);

                    // Use third ACP and either captain's or F/O's side depending of AudioSwitching knob position
                    if audioSwitchingKnob != 1 {
                        let knobCOM1ACP3 = (L:A32NX_ACP3_VHF1_KNOB_VOLUME_DOWN, number);
                        let knobCOM2ACP3 = (L:A32NX_ACP3_VHF2_KNOB_VOLUME_DOWN, number);

                        let volumeCOM1 = knobCOM1ACP3 * (L:A32NX_ACP3_VHF1_VOLUME, number);
                        let volumeCOM2 = knobCOM2ACP3 * (L:A32NX_ACP3_VHF2_VOLUME, number);
                        let volumeCOM3 = (L:A32NX_ACP3_VHF3_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP3_VHF3_VOLUME, number);

                        let volumeHF1 = (L:A32NX_ACP3_HF1_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP3_HF1_VOLUME, number);
                        let volumeHF2 = (L:A32NX_ACP3_HF2_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP3_HF2_VOLUME, number);
                        let volumePA = (L:A32NX_ACP3_PA_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP3_PA_VOLUME, number);
                        let volumeATT = (L:A32NX_ACP3_ATT_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP3_ATT_VOLUME, number);
                        let volumeMECH = (L:A32NX_ACP3_MECH_KNOB_VOLUME_DOWN, number) * (L:A32NX_ACP3_MECH_VOLUME, number);

                        // Use F/O's side as the knob is on captain's side
                        if audioSwitchingKnob == 0 {
                            (K:COM1_VOLUME_SET) = volumeCOM1.max(volumeCOM1ACP2);
                            (K:COM2_VOLUME_SET) = volumeCOM2.max(volumeCOM2ACP2);
                            (K:COM3_VOLUME_SET) = volumeCOM3.max(volumeCOM3ACP2);

                            (K:COM1_RECEIVE_SELECT) = knobCOM1ACP3 == 1 or knobCOM1ACP2 == 1;
                            (K:COM2_RECEIVE_SELECT) = knobCOM2ACP3 == 1 or knobCOM2ACP2 == 1;

                            (L:A32NX_HF1_VOLUME, number) = volumeHF1.max(volumeHF1ACP2);
                            (L:A32NX_HF2_VOLUME, number) = volumeHF2.max(volumeHF2ACP2);
                            (L:A32NX_PA_VOLUME, number) = volumePA.max(volumePAACP2);
                            (L:A32NX_ATT_VOLUME, number) = volumeATT.max(volumeATTACP2);
                            (L:A32NX_MECH_VOLUME, number) = volumeMECH.max(volumeMECHACP2);
                        }

                        // Use captains's side as the knob is on F/0's side
                        if audioSwitchingKnob == 2 {
                            (K:COM1_VOLUME_SET) = volumeCOM1.max(volumeCOM1ACP1);
                            (K:COM2_VOLUME_SET) = volumeCOM2.max(volumeCOM2ACP1);
                            (K:COM3_VOLUME_SET) = volumeCOM3.max(volumeCOM3ACP1);

                            (K:COM1_RECEIVE_SELECT) = knobCOM1ACP3 == 1 or knobCOM1ACP1 == 1;
                            (K:COM2_RECEIVE_SELECT) = knobCOM2ACP3 == 1 or knobCOM1ACP1 == 1;

                            (L:A32NX_HF1_VOLUME, number) = volumeHF1.max(volumeHF1ACP1);
                            (L:A32NX_HF2_VOLUME, number) = volumeHF2.max(volumeHF2ACP1);
                            (L:A32NX_PA_VOLUME, number) = volumePA.max(volumePAACP1);
                            (L:A32NX_ATT_VOLUME, number) = volumeATT.max(volumeATTACP1);
                            (L:A32NX_MECH_VOLUME, number) = volumeMECH.max(volumeMECHACP1);
                        }
                    } else {
                        // Use Captain and F/O's side
                        (K:COM1_VOLUME_SET) = volumeCOM1ACP1.max(volumeCOM1ACP2);
                        (K:COM2_VOLUME_SET) = volumeCOM2ACP1.max(volumeCOM2ACP2);
                        (K:COM3_VOLUME_SET) = volumeCOM3ACP1.max(volumeCOM3ACP2);

                        (K:COM1_RECEIVE_SELECT) = knobCOM1ACP1 == 1 or knobCOM1ACP2 == 1;
                        (K:COM2_RECEIVE_SELECT) = knobCOM2ACP1 == 1 or knobCOM2ACP2 == 1;

                        (L:A32NX_HF1_VOLUME, number) = volumeHF1ACP1.max(volumeHF1ACP2);
                        (L:A32NX_HF2_VOLUME, number) = volumeHF2ACP1.max(volumeHF2ACP2);
                        (L:A32NX_PA_VOLUME, number) = volumePAACP1.max(volumePAACP2);
                        (L:A32NX_ATT_VOLUME, number) = volumeATTACP1.max(volumeATTACP2);
                        (L:A32NX_MECH_VOLUME, number) = volumeMECHACP1.max(volumeMECHACP2);
                    }

                    (L:XMLVAR_COM_UpdateReceivers) = 0;
                }
            </UPDATE_CODE>
        </UseTemplate>
    </Template>
</ModelBehaviors>
